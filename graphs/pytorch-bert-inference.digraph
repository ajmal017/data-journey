digraph { 
"sys" -> "pytorch-bert-inference.ipynb" [label = "import"]
"sys(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"sys(0)" -> "sys" [label = "assign"]
"../input/ppbert/pytorch-pretrained-bert/pytorch-pretrained-BERT(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"package_dir(0)$0" -> "../input/ppbert/pytorch-pretrained-bert/pytorch-pretrained-BERT(0)" [label = "assign"]
"sys(0)$0" -> "sys(0)" [label = "append"]
"sys(0)$0" -> "package_dir(0)$0" [label = "append"]
"__future__" -> "pytorch-bert-inference.ipynb" [label = "import"]
"absolute_import" -> "__future__" [label = "import"]
"absolute_import(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"absolute_import(0)" -> "absolute_import" [label = "assign"]
"__future__" -> "pytorch-bert-inference.ipynb" [label = "import"]
"division" -> "__future__" [label = "import"]
"division(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"division(0)" -> "division" [label = "assign"]
"__future__" -> "pytorch-bert-inference.ipynb" [label = "import"]
"print_function" -> "__future__" [label = "import"]
"print_function(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"print_function(0)" -> "print_function" [label = "assign"]
"torch.utils.data" -> "pytorch-bert-inference.ipynb" [label = "import"]
"torch.utils.data(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"torch.utils.data(0)" -> "torch.utils.data" [label = "assign"]
"numpy" -> "pytorch-bert-inference.ipynb" [label = "import"]
"np(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"np(0)" -> "numpy" [label = "assign"]
"pandas" -> "pytorch-bert-inference.ipynb" [label = "import"]
"pd(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"pd(0)" -> "pandas" [label = "assign"]
"tqdm" -> "pytorch-bert-inference.ipynb" [label = "import"]
"tqdm" -> "tqdm" [label = "import"]
"tqdm(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"tqdm(0)" -> "tqdm" [label = "assign"]
"os" -> "pytorch-bert-inference.ipynb" [label = "import"]
"os(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"os(0)" -> "os" [label = "assign"]
"warnings" -> "pytorch-bert-inference.ipynb" [label = "import"]
"warnings(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"warnings(0)" -> "warnings" [label = "assign"]
"pytorch_pretrained_bert" -> "pytorch-bert-inference.ipynb" [label = "import"]
"BertTokenizer" -> "pytorch_pretrained_bert" [label = "import"]
"BertTokenizer(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BertTokenizer(0)" -> "BertTokenizer" [label = "assign"]
"BertForSequenceClassification" -> "pytorch_pretrained_bert" [label = "import"]
"BertForSequenceClassification(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BertForSequenceClassification(0)" -> "BertForSequenceClassification" [label = "assign"]
"BertAdam" -> "pytorch_pretrained_bert" [label = "import"]
"BertAdam(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BertAdam(0)" -> "BertAdam" [label = "assign"]
"pytorch_pretrained_bert" -> "pytorch-bert-inference.ipynb" [label = "import"]
"BertConfig" -> "pytorch_pretrained_bert" [label = "import"]
"BertConfig(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BertConfig(0)" -> "BertConfig" [label = "assign"]
"warnings(0)$0" -> "warnings(0)" [label = "filterwarnings"]
"torch(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"device(0)$0" -> "torch(0)" [label = "device"]
"cuda(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"device(0)$0" -> "cuda(0)" [label = "device"]
"example(1)" -> "convert_lines[0]" [label = "_argToVar"]
"max_seq_length(1)" -> "convert_lines[1]" [label = "_argToVar"]
"tokenizer(1)" -> "convert_lines[2]" [label = "_argToVar"]
"max_seq_length(1)$0" -> "2(1)" [label = "Sub"]
"max_seq_length(1)$0" -> "max_seq_length(1)" [label = "Sub"]
"all_tokens(1)$0" -> "[](1)" [label = "assign"]
"longer(1)$0" -> "0(1)" [label = "assign"]
"text(1)" -> "tqdm(1)" [label = "Iter"]
"text(1)" -> "example(1)" [label = "Iter"]
"tokens_a(1)$0" -> "tokenizer(1)" [label = "tokenize"]
"tokens_a(1)$0" -> "text(1)" [label = "tokenize"]
"tokens_a(1)$1" -> "tokens_a(1)$0" [label = "assign"]
"tokens_a(1)$1" -> "max_seq_length(1)$0" [label = "assign"]
"longer(1)$1" -> "1(1)" [label = "Add"]
"longer(1)$1" -> "longer(1)$0" [label = "Add"]
"one_token(1)$0" -> "tokenizer(1)" [label = "Add"]
"one_token(1)$0" -> "[<_ast.Str object at 0x106027890>](1)" [label = "Add"]
"one_token(1)$0" -> "tokens_a(1)$1" [label = "Add"]
"one_token(1)$0" -> "[<_ast.Str object at 0x1060278d0>](1)" [label = "Add"]
"one_token(1)$0" -> "[<_ast.Num object at 0x106027590>](1)" [label = "Add"]
"one_token(1)$0" -> "max_seq_length(1)$0" [label = "Add"]
"one_token(1)$0" -> "len(1)" [label = "Add"]
"one_token(1)$0" -> "tokens_a(1)$1" [label = "Add"]
"all_tokens(1)$1" -> "all_tokens(1)$0" [label = "append"]
"all_tokens(1)$1" -> "one_token(1)$0" [label = "append"]
"220(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"MAX_SEQUENCE_LENGTH(0)$0" -> "220(0)" [label = "assign"]
"1234(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"SEED(0)$0" -> "1234(0)" [label = "assign"]
"32(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BATCH_SIZE(0)$0" -> "32(0)" [label = "assign"]
"../input/bert-pretrained-models/uncased_l-12_h-768_a-12/uncased_L-12_H-768_A-12/(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"BERT_MODEL_PATH(0)$0" -> "../input/bert-pretrained-models/uncased_l-12_h-768_a-12/uncased_L-12_H-768_A-12/(0)" [label = "assign"]
"np(0)$0" -> "np(0)" [label = "seed"]
"np(0)$0" -> "SEED(0)$0" [label = "seed"]
"torch(0)$0" -> "torch(0)" [label = "manual_seed"]
"torch(0)$0" -> "SEED(0)$0" [label = "manual_seed"]
"torch(0)$1" -> "torch(0)$0" [label = "manual_seed"]
"torch(0)$1" -> "SEED(0)$0" [label = "manual_seed"]
"../input/bert-inference/bert/bert_config.json(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"bert_config(0)$0" -> "../input/bert-inference/bert/bert_config.json(0)" [label = "BertConfig"]
"tokenizer(0)$0" -> "BertTokenizer(0)" [label = "from_pretrained"]
"tokenizer(0)$0" -> "BERT_MODEL_PATH(0)$0" [label = "from_pretrained"]
"test_df(0)$0" -> "pd(0)" [label = "read_csv"]
"../input/jigsaw-unintended-bias-in-toxicity-classification/test.csv(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"test_df(0)$0" -> "../input/jigsaw-unintended-bias-in-toxicity-classification/test.csv(0)" [label = "read_csv"]
"test_df(0)$1" -> "test_df(0)$0" [label = "astype"]
"test_df(0)$1" -> "test_df(0)$0" [label = "astype"]
"comment_text(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"test_df(0)$1" -> "comment_text(0)" [label = "astype"]
"str(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"test_df(0)$1" -> "str(0)" [label = "astype"]
"X_test(0)$0" -> "test_df(0)$1" [label = "convert_lines"]
"X_test(0)$0" -> "comment_text(0)" [label = "convert_lines"]
"DUMMY_VALUE(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"X_test(0)$0" -> "DUMMY_VALUE(0)" [label = "convert_lines"]
"X_test(0)$0" -> "MAX_SEQUENCE_LENGTH(0)$0" [label = "convert_lines"]
"X_test(0)$0" -> "tokenizer(0)$0" [label = "convert_lines"]
"model(0)$0" -> "bert_config(0)$0" [label = "BertForSequenceClassification"]
"1(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"model(0)$0" -> "1(0)" [label = "BertForSequenceClassification"]
"model(0)$1" -> "model(0)$0" [label = "load_state_dict"]
"model(0)$1" -> "torch(0)$1" [label = "load_state_dict"]
"../input/bert-inference/bert/bert_pytorch.bin(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"model(0)$1" -> "../input/bert-inference/bert/bert_pytorch.bin(0)" [label = "load_state_dict"]
"model(0)$2" -> "model(0)$1" [label = "to"]
"model(0)$2" -> "device(0)$0" [label = "to"]
"param(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"param(0)" -> "model(0)$2" [label = "Iter"]
"model(0)$3" -> "model(0)$2" [label = "eval"]
"test_preds(0)$0" -> "np(0)$0" [label = "zeros"]
"len(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"test_preds(0)$0" -> "len(0)" [label = "zeros"]
"test_preds(0)$0" -> "X_test(0)$0" [label = "zeros"]
"test(0)$0" -> "torch(0)$1" [label = "TensorDataset"]
"test(0)$0" -> "torch(0)$1" [label = "TensorDataset"]
"test(0)$0" -> "X_test(0)$0" [label = "TensorDataset"]
"test(0)$0" -> "torch(0)$1" [label = "TensorDataset"]
"test_loader(0)$0" -> "torch(0)$1" [label = "DataLoader"]
"test_loader(0)$0" -> "test(0)$0" [label = "DataLoader"]
"test_loader(0)$0" -> "32(0)" [label = "DataLoader"]
"tk0(0)$0" -> "test_loader(0)$0" [label = "tqdm"]
"enumerate(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"i(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"i(0)" -> "enumerate(0)" [label = "Iter"]
"x_batch(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"x_batch(0)" -> "enumerate(0)" [label = "Iter"]
"i(0)" -> "tk0(0)$0" [label = "Iter"]
"x_batch(0)" -> "tk0(0)$0" [label = "Iter"]
"pred(0)$0" -> "x_batch(0)" [label = "model"]
"pred(0)$0" -> "device(0)$0" [label = "model"]
"pred(0)$0" -> "x_batch(0)" [label = "model"]
"0(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"pred(0)$0" -> "0(0)" [label = "model"]
"pred(0)$0" -> "device(0)$0" [label = "model"]
"test_preds(0)$1" -> "test_preds(0)$0" [label = "numpy"]
"test_preds(0)$1" -> "pred(0)$0" [label = "numpy"]
"test_preds(0)$1" -> "0(0)" [label = "numpy"]
"test_pred(0)$0" -> "torch(0)$1" [label = "ravel"]
"test_pred(0)$0" -> "torch(0)$1" [label = "ravel"]
"test_pred(0)$0" -> "test_preds(0)$1" [label = "ravel"]
"submission(0)$0" -> "pd(0)" [label = "from_dict"]
"id(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"submission(0)$0" -> "id(0)" [label = "from_dict"]
"prediction(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"submission(0)$0" -> "prediction(0)" [label = "from_dict"]
"submission(0)$0" -> "test_df(0)$1" [label = "from_dict"]
"submission(0)$0" -> "id(0)" [label = "from_dict"]
"submission(0)$0" -> "test_pred(0)$0" [label = "from_dict"]
"submission(0)$1" -> "submission(0)$0" [label = "to_csv"]
"submission.csv(0)" -> "pytorch-bert-inference.ipynb" [label = "appears"]
"submission(0)$1" -> "submission.csv(0)" [label = "to_csv"]
"submission(0)$2" -> "submission(0)$1" [label = "head"]
}