digraph { 
"RESPONSE_TIME(0)$0" -> "1(0)" [label = "eq"]
"self(1)" -> "prioritize_network[0]" [label = "_argToVar"]
"response_times(1)" -> "prioritize_network[1]" [label = "_argToVar"]
"cost(1)" -> "prioritize_network[2]" [label = "_argToVar"]
"priority(1)" -> "prioritize_network[3]" [label = "_argToVar"]
"first_priority(1)$0" -> "response_times(1)" [label = "enumerate"]
"second_priority(1)$0" -> "cost(1)" [label = "enumerate"]
"first_priority(1)$1" -> "cost(1)" [label = "enumerate"]
"second_priority(1)$1" -> "response_times(1)" [label = "enumerate"]
"sorted_list(1)$0" -> "first_priority(1)$1" [label = "sorted"]
"sorted_list(1)$0" -> "x(1)" [label = "sorted"]
"sorted_list(1)$0" -> "1(1)" [label = "sorted"]
"print[0]" -> "sorted list: (1)" [label = "print"]
"print[1]" -> "sorted_list(1)$0" [label = "print"]
"key(1)" -> "sorted_list(1)$0" [label = "Iter"]
"network(1)" -> "sorted_list(1)$0" [label = "Iter"]
"print[0]" -> "Se valida si hay un valor de red repetido(1)" [label = "print"]
"print[0]" -> "response_times(1)" [label = "print"]
"print[1]" -> "network(1)" [label = "print"]
"print[0]" -> "Almacena los duplicados(1)" [label = "print"]
"duplicated(1)$0" -> "first_network_tuple(1)" [label = "eq"]
"duplicated(1)$0" -> "0(1)" [label = "eq"]
"duplicated(1)$0" -> "first_network_tuple(1)" [label = "eq"]
"duplicated(1)$0" -> "sorted_list(1)$0" [label = "eq"]
"duplicated(1)$0" -> "first_network_tuple(1)" [label = "eq"]
"duplicated(1)$0" -> "1(1)" [label = "eq"]
"duplicated(1)$0" -> "network(1)" [label = "eq"]
"print[0]" -> "duplicated(1)$0" [label = "print"]
"print[0]" -> "Obtiene los valores de los indices repetidos segun la 'segunda' prioridad(1)" [label = "print"]
"sub_list(1)$0" -> "second_network_tuple(1)" [label = "eq"]
"sub_list(1)$0" -> "second_network_tuple(1)" [label = "eq"]
"sub_list(1)$0" -> "second_priority(1)$1" [label = "eq"]
"sub_list(1)$0" -> "second_network_tuple(1)" [label = "eq"]
"sub_list(1)$0" -> "0(1)" [label = "eq"]
"sub_list(1)$0" -> "duplicated(1)$0" [label = "eq"]
"print[0]" -> "sub_list(1)$0" [label = "print"]
"print[0]" -> "Obtiene los indices ordenados usando la segunda prioridad como apoyo(1)" [label = "print"]
"sort_sub_list(1)$0" -> "second_network_tuple(1)" [label = "eq"]
"sort_sub_list(1)$0" -> "0(1)" [label = "eq"]
"sort_sub_list(1)$0" -> "second_network_tuple(1)" [label = "eq"]
"sort_sub_list(1)$0" -> "sorted(1)" [label = "eq"]
"sort_sub_list(1)$0" -> "sub_list(1)$0" [label = "eq"]
"sort_sub_list(1)$0" -> "x(1)" [label = "eq"]
"sort_sub_list(1)$0" -> "1(1)" [label = "eq"]
"print[0]" -> "sort_sub_list(1)$0" [label = "print"]
"print[0]" -> "Agrega las repetidas en el orden correspondiente(1)" [label = "print"]
"keys(1)$0" -> "keys(1)" [label = "Add"]
"keys(1)$0" -> "sort_sub_list(1)$0" [label = "Add"]
"print[0]" -> "Estado actual del proceso de priorizaciÃ³n (1)" [label = "print"]
"print[1]" -> "keys(1)$0" [label = "print"]
"keys(1)$1" -> "keys(1)$0" [label = "append"]
"keys(1)$1" -> "key(1)" [label = "append"]
"network(0)$0" -> "network(0)" [label = "prioritize_network"]
"network(0)$0" -> "[<_ast.Num object at 0x104f52d90>, <_ast.Num object at 0x104f52250>, <_ast.Num object at 0x104f52ed0>, <_ast.Num object at 0x104f52210>, <_ast.Num object at 0x104f520d0>, <_ast.Num object at 0x104f52dd0>](0)" [label = "prioritize_network"]
"network(0)$0" -> "[<_ast.Num object at 0x104f52a50>, <_ast.Num object at 0x104f52b50>, <_ast.Num object at 0x104f52f50>, <_ast.Num object at 0x104f52110>, <_ast.Num object at 0x104f52c10>, <_ast.Num object at 0x104f52490>](0)" [label = "prioritize_network"]
"network(0)$0" -> "Criteria(0)" [label = "prioritize_network"]
}