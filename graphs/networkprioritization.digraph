digraph { 
"RESPONSE_TIME(1)$0" -> "1(1)" [label = "eq"]
"self(3)" -> "prioritize_network[0]" [label = "_argToVar"]
"response_times(3)" -> "prioritize_network[1]" [label = "_argToVar"]
"cost(3)" -> "prioritize_network[2]" [label = "_argToVar"]
"priority(3)" -> "prioritize_network[3]" [label = "_argToVar"]
"first_priority(3)$0" -> "response_times(3)" [label = "enumerate"]
"second_priority(3)$0" -> "cost(3)" [label = "enumerate"]
"first_priority(3)$1" -> "cost(3)" [label = "enumerate"]
"second_priority(3)$1" -> "response_times(3)" [label = "enumerate"]
"sorted_list(3)$0" -> "first_priority(3)$1" [label = "sorted"]
"sorted_list(3)$0" -> "x(3)" [label = "sorted"]
"sorted_list(3)$0" -> "1(3)" [label = "sorted"]
"print[0]" -> "sorted list: (3)" [label = "print"]
"print[1]" -> "sorted_list(3)$0" [label = "print"]
"key(3)" -> "sorted_list(3)$0" [label = "Iter"]
"network(3)" -> "sorted_list(3)$0" [label = "Iter"]
"print[0]" -> "Se valida si hay un valor de red repetido(3)" [label = "print"]
"print[0]" -> "response_times(3)" [label = "print"]
"print[1]" -> "network(3)" [label = "print"]
"print[0]" -> "Almacena los duplicados(3)" [label = "print"]
"duplicated(3)$0" -> "first_network_tuple(3)" [label = "eq"]
"duplicated(3)$0" -> "0(3)" [label = "eq"]
"duplicated(3)$0" -> "first_network_tuple(3)" [label = "eq"]
"duplicated(3)$0" -> "sorted_list(3)$0" [label = "eq"]
"duplicated(3)$0" -> "first_network_tuple(3)" [label = "eq"]
"duplicated(3)$0" -> "1(3)" [label = "eq"]
"duplicated(3)$0" -> "network(3)" [label = "eq"]
"print[0]" -> "duplicated(3)$0" [label = "print"]
"print[0]" -> "Obtiene los valores de los indices repetidos segun la 'segunda' prioridad(3)" [label = "print"]
"sub_list(3)$0" -> "second_network_tuple(3)" [label = "eq"]
"sub_list(3)$0" -> "second_network_tuple(3)" [label = "eq"]
"sub_list(3)$0" -> "second_priority(3)$1" [label = "eq"]
"sub_list(3)$0" -> "second_network_tuple(3)" [label = "eq"]
"sub_list(3)$0" -> "0(3)" [label = "eq"]
"sub_list(3)$0" -> "duplicated(3)$0" [label = "eq"]
"print[0]" -> "sub_list(3)$0" [label = "print"]
"print[0]" -> "Obtiene los indices ordenados usando la segunda prioridad como apoyo(3)" [label = "print"]
"sort_sub_list(3)$0" -> "second_network_tuple(3)" [label = "eq"]
"sort_sub_list(3)$0" -> "0(3)" [label = "eq"]
"sort_sub_list(3)$0" -> "second_network_tuple(3)" [label = "eq"]
"sort_sub_list(3)$0" -> "sorted(3)" [label = "eq"]
"sort_sub_list(3)$0" -> "sub_list(3)$0" [label = "eq"]
"sort_sub_list(3)$0" -> "x(3)" [label = "eq"]
"sort_sub_list(3)$0" -> "1(3)" [label = "eq"]
"print[0]" -> "sort_sub_list(3)$0" [label = "print"]
"print[0]" -> "Agrega las repetidas en el orden correspondiente(3)" [label = "print"]
"keys(3)$0" -> "keys(3)" [label = "Add"]
"keys(3)$0" -> "sort_sub_list(3)$0" [label = "Add"]
"print[0]" -> "Estado actual del proceso de priorizaciÃ³n (3)" [label = "print"]
"print[1]" -> "keys(3)$0" [label = "print"]
"keys(3)$1" -> "keys(3)$0" [label = "append"]
"keys(3)$1" -> "key(3)" [label = "append"]
"network(0)$0" -> "network(0)" [label = "prioritize_network"]
"network(0)$0" -> "[<_ast.Num object at 0x10ae03f90>, <_ast.Num object at 0x10ae03dd0>, <_ast.Num object at 0x10ae03ad0>, <_ast.Num object at 0x10ae03cd0>, <_ast.Num object at 0x10ae03a50>, <_ast.Num object at 0x10ae03f10>](0)" [label = "prioritize_network"]
"network(0)$0" -> "[<_ast.Num object at 0x10ae03890>, <_ast.Num object at 0x10ae031d0>, <_ast.Num object at 0x10ae037d0>, <_ast.Num object at 0x10ae03350>, <_ast.Num object at 0x10ae03190>, <_ast.Num object at 0x10ae03bd0>](0)" [label = "prioritize_network"]
"network(0)$0" -> "Criteria(0)" [label = "prioritize_network"]
}